library(devtools)
library(creds)
api_key <- creds::eia_key
rm(api_key)
library(devtools)
usethis::use_ccby_nc_license()
use_proprietary_license("Justin Powley, Brayden Boyko")
document()
git add .
use_proprietary_license("Justin Powley, Brayden Boyko")
library(testthat)
use_testthat()
use_test("eia_data_mapping")
?test_that
test_that("eia_map_works", {
products <- c('petroleum/pri/spt/data', 'natural-gas/pri/sum/data') ## These Are The Only Two That Have Price Data Related (So They Maintain Consistent Columns)
all_series <- list() ## Discuss What We Care About Mapping For This Project
for (product in products){
df <- eia_map(sub = product, offset = 0, freq = "monthly", api_key = key )
all_series <- append(all_series, list(df))
}
all_series_df <- dplyr::bind_rows(all_series)
all_series_df ## Missing Multiple // Will Work On This Week, Wanted A General Idea
})
test_that("eia_map_works", {
expect_no_error({
products <- c('petroleum/pri/spt/data', 'natural-gas/pri/sum/data') ## These Are The Only Two That Have Price Data Related (So They Maintain Consistent Columns)
all_series <- list() ## Discuss What We Care About Mapping For This Project
for (product in products){
df <- eia_map(sub = product, offset = 0, freq = "monthly", api_key = key )
all_series <- append(all_series, list(df))
}
all_series_df <- dplyr::bind_rows(all_series)
all_series_df ## Missing Multiple // Will Work On This Week, Wanted A General Idea
})
load_all()
test_that("eia_map_works", {
expect_no_error({
products <- c('petroleum/pri/spt/data', 'natural-gas/pri/sum/data') ## These Are The Only Two That Have Price Data Related (So They Maintain Consistent Columns)
all_series <- list() ## Discuss What We Care About Mapping For This Project
for (product in products){
df <- eia_map(sub = product, offset = 0, freq = "monthly", api_key = key )
all_series <- append(all_series, list(df))
}
all_series_df <- dplyr::bind_rows(all_series)
all_series_df ## Missing Multiple // Will Work On This Week, Wanted A General Idea
})
test()
load_all()
test()
use_r("map_headers")
#' Remap Headers
#'
#' @param api_key A string
#' @param headers A named list with keys matching facet type.
#'
#' @return
#'
#' @examples
map_headers <- function(url, api_key, headers = NULL){
if(is.null(headers)){
return(paste0(url, "?api_key=", api_key))
}
rm(map_headers)
document()
check()
load_all()
load("~/FIN 450/eiatools/data/root.rda")
rm(root)
my_data <- "We have no need for user accessible data yet! Data is defined via testthat or for function internal use!"
usethis::use_data(my_data, overwrite = T)
document()
load_all()
map_headers("http://mysite.org", "1234", list(series = "parmesian", country = "italy"))
load_all()
map_headers("http://mysite.org", "1234", list(series = "parmesian", country = "italy"))
httr::add_headers(type = "parmesian", country = "italy")
"mysite.org" %>% httr::add_headers(type = "parmesian", country = "italy")
httr::add_headers(type = "parmesian", country = "italy")
httr::modify_url("mysite.org", params = httr::add_headers(country = "italy"))
httr::add_headers(list(country = "italy"))
httr::add_headers(list(country = "italy") %>% flatten())
list(country = "italy", province = "alberta") %>% do.call(httr::add_headers, .)
load_all()
map_headers("https://mysite.org", "1234", list(country = "italy", type = "parmesian"))
load_all()
map_headers("https://mysite.org", "1234", list(country = "italy", type = "parmesian"))
load_all()
map_headers("https://mysite.org", "1234", list(country = "italy", type = "parmesian"))
map_headers("https://mysite.org", "1234", list(country = "italy", type = "parmesian")) %>% httr::modify_url("mysite.org", query = .)
map_headers("https://mysite.org", "1234", list(country = "italy", type = "parmesian")) %>% httr::modify_url("mysite.org", params = .)
map_headers("https://mysite.org", "1234", list(country = "italy", type = "parmesian")) %>% httr::modify_url("mysite.org", query = .)
list(country = "italy", type = "parmesian")
list(country = "italy", type = "parmesian") %>% do.call(httr::add_headers, .)
list(country = "italy", type = "parmesian") %>% do.call(httr::add_headers, .) %>% httr::modify_url(url = "base_url", .)
list(country = "italy", type = "parmesian") %>% do.call(httr::add_headers, .) %>% httr::modify_url(url = "base_url", query = .)
c(country = "italy", type = "parmesian") %>% do.call(httr::add_headers, .) %>% httr::modify_url(url = "base_url", query = .)
c(country = "italy", type = "parmesian") %>% httr::add_headers() %>% httr::modify_url(url = "base_url", query = .)
c(country = "italy", type = "parmesian") %>% httr::add_headers()
is.list(c(1,2))
is.list(list(1,2))
is.list(c(list(1,2)))
list(1,2)
list(1,2) %>% str()
list(1,2) %>% c() %>% str()
list(1,2) %>% unlist() %>% str()
list(apple = 1, iphone = 2) %>% unlist() %>% str()
c(apple = 1, iphone = 2)
list(apple = 1, iphone = 2) %>% unlist() %>% c() %>% str()
print(unlist(list(apple = 1, iphone = 2)))
unlist(list(apple = 1, iphone = 2)) %>% str()
str(c(apple = 1, iphone = 2))
load_all()
map_headers("mysite.org", "1234", list(a = 1, b = 2))
httr::request("mysite.org")
httr::modify_url("url", query = list(param1 = "value1", param2 = "value2"))
httr::modify_url("url", query = c(param1 = "value1", param2 = "value2"))
load_all()
map_headers("myite.org", "1234", list(food = "cheese", temp = "4_degrees"))
load_all()
map_headers("myite.org", "1234", list(food = "cheese", temp = "4_degrees"))
map_headers("https://mysite.org", "1234", list(food = "cheese", temp = "4_degrees"))
use_test("eia_version")
eia_version(creds::eia_key)
test()
use_r("add_facets")
# Conversion for known facets and headers:
conversion_table <- list(
sort = "sort[0][column]",
direction = "sort[0][direction]",
data = "data[0]"
)
conversion_table["sort"]
conversion_table["sort"][1]
conversion_table["sort"][[1]
conversion_table["sort"][[1]]
load_all()
map_headers("https://mysite.org", "1234", list(sort = "period", direction = "desc", data = "value"))
load_all()
map_headers("https://mysite.org", "1234", list(sort = "period", direction = "desc", data = "value"))
load_all()
map_headers("https://mysite.org", "1234", list(sort = "period", direction = "desc", data = "value"))
map_headers("https://mysite.org", "1234", list(sort = "period", direction = "desc", data = "value")) %>% paste0(collapse = &)
map_headers("https://mysite.org", "1234", list(sort = "period", direction = "desc", data = "value")) %>% paste0(collapse = "&")
map_headers("https://mysite.org", "1234", list(sort = "period", direction = "desc", data = "value"))
load_all()
map_headers("https://mysite.org", "1234", list(sort = "period", direction = "desc", data = "value")) -> temp
paste(names(temp), unlist(temp)))
paste(names(temp), unlist(temp))
paste(names(temp), unlist(temp), sep = "=", collapse = "&")
load_all()
map_headers("https://mysite.org", "1234", list(sort = "period", direction = "desc", data = "value"))
load_all()
map_headers("https://mysite.org", "1234", list(sort = "period", direction = "desc", data = "value"))
load_all()
key <- creds::eia_key
expect_no_error({
products <- c('petroleum/pri/spt/data', 'natural-gas/pri/sum/data') ## These Are The Only Two That Have Price Data Related (So They Maintain Consistent Columns)
all_series <- list() ## Discuss What We Care About Mapping For This Project
for (product in products){
df <- eia_map(sub = product, offset = 0, freq = "monthly", api_key = key )
all_series <- append(all_series, list(df))
}
all_series_df <- dplyr::bind_rows(all_series)
all_series_df ## Missing Multiple // Will Work On This Week, Wanted A General Idea
})
#expect_no_error({
products <- c('petroleum/pri/spt/data', 'natural-gas/pri/sum/data') ## These Are The Only Two That Have Price Data Related (So They Maintain Consistent Columns)
all_series <- list() ## Discuss What We Care About Mapping For This Project
for (product in products){
df <- eia_map(sub = product, offset = 0, freq = "monthly", api_key = key )
all_series <- append(all_series, list(df))
}
key <- creds::eia_key
#expect_no_error({
products <- c('petroleum/pri/spt/data', 'natural-gas/pri/sum/data') ## These Are The Only Two That Have Price Data Related (So They Maintain Consistent Columns)
all_series <- list() ## Discuss What We Care About Mapping For This Project
for (product in products){
df <- eia_map(sub = product, offset = 0, freq = "monthly", api_key = key)
all_series <- append(all_series, list(df))
}
load_all()
key <- creds::eia_key
#expect_no_error({
products <- c('petroleum/pri/spt/data', 'natural-gas/pri/sum/data') ## These Are The Only Two That Have Price Data Related (So They Maintain Consistent Columns)
all_series <- list() ## Discuss What We Care About Mapping For This Project
for (product in products){
df <- eia_map(sub = product, offset = 0, freq = "monthly", api_key = key)
all_series <- append(all_series, list(df))
}
load_all()
key <- creds::eia_key
#expect_no_error({
products <- c('petroleum/pri/spt/data', 'natural-gas/pri/sum/data') ## These Are The Only Two That Have Price Data Related (So They Maintain Consistent Columns)
all_series <- list() ## Discuss What We Care About Mapping For This Project
for (product in products){
df <- eia_map(sub = product, offset = 0, freq = "monthly", api_key = key)
all_series <- append(all_series, list(df))
}
all_series_df <- dplyr::bind_rows(all_series)
"https://api.eia.gov/v2/petroleum/pri/spt/data?sort[0][column]=period&sort[0][direction]=desc&data[0]=value&length=5000&offset=0&frequency=monthly&api_key=UKCNbCB0m8aixfPBshQU3Jdlz2uZsEbG2HebvhHX" %>% eia_call()
load_all()
key <- creds::eia_key
#expect_no_error({
products <- c('petroleum/pri/spt/data', 'natural-gas/pri/sum/data') ## These Are The Only Two That Have Price Data Related (So They Maintain Consistent Columns)
all_series <- list() ## Discuss What We Care About Mapping For This Project
for (product in products){
df <- eia_map(sub = product, offset = 0, freq = "monthly", api_key = key)
all_series <- append(all_series, list(df))
}
load_all()
key <- creds::eia_key
#expect_no_error({
products <- c('petroleum/pri/spt/data', 'natural-gas/pri/sum/data') ## These Are The Only Two That Have Price Data Related (So They Maintain Consistent Columns)
all_series <- list() ## Discuss What We Care About Mapping For This Project
for (product in products){
df <- eia_map(sub = product, offset = 0, freq = "monthly", api_key = key)
all_series <- append(all_series, list(df))
}
load_all()
key <- creds::eia_key
#expect_no_error({
products <- c('petroleum/pri/spt/data', 'natural-gas/pri/sum/data') ## These Are The Only Two That Have Price Data Related (So They Maintain Consistent Columns)
all_series <- list() ## Discuss What We Care About Mapping For This Project
for (product in products){
df <- eia_map(sub = product, offset = 0, freq = "monthly", api_key = key)
all_series <- append(all_series, list(df))
}
load_all()
key <- creds::eia_key
#expect_no_error({
products <- c('petroleum/pri/spt/data', 'natural-gas/pri/sum/data') ## These Are The Only Two That Have Price Data Related (So They Maintain Consistent Columns)
all_series <- list() ## Discuss What We Care About Mapping For This Project
for (product in products){
df <- eia_map(sub = product, offset = 0, freq = "monthly", api_key = key)
all_series <- append(all_series, list(df))
}
all_series_df <- dplyr::bind_rows(all_series)
load_all()
key <- creds::eia_key
#expect_no_error({
products <- c('petroleum/pri/spt/data', 'natural-gas/pri/sum/data') ## These Are The Only Two That Have Price Data Related (So They Maintain Consistent Columns)
all_series <- list() ## Discuss What We Care About Mapping For This Project
for (product in products){
df <- eia_map(sub = product, offset = 0, freq = "monthly", api_key = key)
all_series <- append(all_series, list(df))
}
all_series_df <- dplyr::bind_rows(all_series)
all_series_df ## Missing Multiple // Will Work On This Week, Wanted A General Idea
document()
check()
test()
use_package("creds")
document()
check()
document()
check()
document()
check()
test()
?uniqe()
?unique()
document()
check()
load_all()
check()
test()
available::available("creds")
available::available("myCreds")
library(devtools)
load_all()
eia_meta(creds::eia_key)
eia_meta("", api_key = creds::eia_key)
eia_meta("", api_key = creds::eia_key) -> temp
temp
temp$routes %>% str()
document()
use_r("build_index")
use_r("get_all_freq")
document()
check()
eia_meta("", creds::eia_key)
eia_meta("", creds::eia_key) -> temp
View(temp)
eia_meta("coal", creds::eia_key) -> temp
eia_meta("coal/shipments", creds::eia_key) -> temp
eia_meta("coal/shipments/receipts", creds::eia_key) -> temp
document()
check()
View(temp)
load_all()
library(devtools)
load_all()
library(devtools)
document()
check()
library(devtools)
document()
load_all()
eia_reports
eia_reports()
eia_reports("petroleum")
use_package(reticulate)
use_package("reticulate")
load_all()
eia_reports("petroleum")
# Thisdoesn't appear to be working as intended
reticulate::py_install("pandas; openpyxl")
# Thisdoesn't appear to be working as intended
reticulate::py_install("pandas")
reticulate::py_install("openpyxl")
load_all()
get_reports("petroleum")
eia_reports("petroleum")
reticulate::py_install("xlrd")
eia_reports("petroleum")
load_all()
eia_reports("petroleum")
reticulate::py_last_error()
load_all()
reticulate::py_last_error()
eia_reports("petroleum")
load_all()
eia_reports("petroleum")
reticulate::py_last_error()
use_r("route_tree")
load_all()
route_tree(creds::api_key)
route_tree(creds::eia_key)
route_tree("", pi_key = creds::eia_key)
route_tree("", api_key = creds::eia_key)
route_tree("", api_key = creds::eia_key) %>% View()
eia_meta("", creds::eia_key)
eia_meta("", creds::eia_key) %>% View()
eia_meta("PET", creds::eia_key) %>% View()
eia_meta("petroleum", creds::eia_key) %>% View()
eia_meta("petroleum/sum", creds::eia_key) %>% View()
eia_meta("petroleum/sum/snd", creds::eia_key) %>% View()
eia_get_all_freq("petroleum/sum/snd", creds::eia_key) %>% View()
get_all_freq("petroleum/sum/snd", creds::eia_key) %>% View()
get_all_freq("petroleum/sum/snd", creds::eia_key) %>% get_all_freq
get_all_freq("petroleum/sum/snd", creds::eia_key) %>% get_all_freq()
eia_meta("petroleum/sum/snd", creds::eia_key) %>% get_all_freq()
use_r("get_facet_options")
eia_meta("petroleum/sum/snd", creds::eia_key) %>% View()
load_all()
route_tree("petroleum/sum/snd", creds::eia_key) %>% View()
load_all()
route_tree("petroleum/sum/snd", creds::eia_key) %>% View()
load_all()
route_tree("petroleum/sum/snd", creds::eia_key) %>% View()\
route_tree("petroleum/sum/snd", creds::eia_key) %>% View()
load_all()
route_tree("petroleum/sum/snd", creds::eia_key) %>% View()
load_all()
route_tree("petroleum/sum/snd", creds::eia_key) %>% View()
load_all()
route_tree("petroleum/sum/snd", creds::eia_key) %>% View()
load_all()
route_tree("petroleum/sum/snd", creds::eia_key) %>% View()
load_all()
route_tree("petroleum/sum/snd", creds::eia_key) %>% View()
route_tree("petroleum/sum/snd", creds::eia_key) -> temp
View(temp)
str(temp)
str(temp$freq)
for(f in facet_opts){
}
use_r("get_facet_data")
load_all()
get_facet_data("petroleum/sum/snd", "series", creds::eia_key)
load_all()
get_facet_data("petroleum/sum/snd", "series", creds::eia_key)
get_facet_data("petroleum/sum/snd", "series", creds::eia_key) %>% View()
load_all()
get_facet_data("petroleum/sum/snd", "series", creds::eia_key) %>% View()
get_facet_data("petroleum/sum/snd", "series", creds::eia_key) %>% str()
load_all()
route_tree("petroleum/sum/snw", creds::eia_key)
document()
load_all()
route_tree("petroleum/sum/snw", creds::eia_key)
route_tree("petroleum/sum/snw", creds::eia_key) -> temp
View(temp)
load_all()
route_tree("petroleum/sum/snw", creds::eia_key) -> temp
View(temp)
str(temp)
load_all()
route_tree("petroleum/sum/snw", creds::eia_key) -> temp
str(temp)
load_all()
route_tree("petroleum/sum/snw", creds::eia_key) -> temp
load_all()
route_tree("petroleum/sum/snw", creds::eia_key) -> temp
get_rouets("petroleum/sum", creds::eia_key) -> temp
get_routes("petroleum/sum", creds::eia_key) -> temp
eia_meta("petroleum/sum", creds::eia_key) -> temp
View(temp)
route_tree("petroleum/sum/snd", creds::eia_key) -> temp
?symn
?sym
use_package("rlang")
load_all()
route_tree("petroleum/sum/snd", creds::eia_key) -> temp
temp %>% str()
temp$product
temp$product %>% names()
temp$product %>% str()
temp$product[[1]]
temp$product[[1]] %>% names()
temp$product[[1]]
temp$product[[1]][[1]]
temp$product[[1]][[2]]
load_all()
route_tree("petroleum/sum", creds::eia_key) -> temp
"temp"
!!"temp"
!!sym("temp")
!!rlang::sym("temp")
!!rlang::sym("temp") := 1
load_all()
route_tree("petroleum/sum/snd", creds::eia_key) -> temp
load_all()
route_tree("petroleum/sum/snd", creds::eia_key) -> temp
View(temp)
load_all()
route_tree("petroleum/sum/snd", creds::eia_key) -> temp
View(temp)
load_all()
route_tree("petroleum/sum", creds::eia_key) -> temp
load_all()
route_tree("petroleum/sum", creds::eia_key) -> temp
View(temp)
load_all()
route_tree("petroleum/sum", creds::eia_key) -> temp
View(temp)
use_r("get_data_types")
eia_meta("petroleum/sum/snd", creds::eia_key) %>% View()
eia_meta("petroleum/sum/snd", creds::eia_key) %>% .data %>% names()
eia_meta("petroleum/sum/snd", creds::eia_key) %>% .$data %>% names()
load_all()
route_tree("petroleum/sum", creds::eia_key) -> temp
View(temp)
document()
check()
document()
pkgload::dev_help('eia_map')
document()
check()
document()
check()
usethis::use_import_from("rlang", ":=")
document()
check()
devtools::load_all()
route_tree_sample <- route_tree("petroleum/sum", creds::eia_key)
usethis::use_data(route_tree_sample, overwrite = T)
load_all()
eiatools::route_tree_sample
document()
check()
temp <- route_tree("petroleum", creds::eia_key)
library(devtools)
load_all()
eiatools::eia_reports()
eiatools::eia_reports("petroleum")
get_routes("petroleum", creds::eia_key)
eia_meta("petroleum", creds::eia_key) %>% get_routes()
eia_meta("petroleum/crd", creds::eia_key) %>% get_routes()
eia_meta("petroleum/crd/wellend", creds::eia_key) %>% get_routes()
eia_meta("petroleum/crd/wellend", creds::eia_key) %>% get_facet_types()
get_facet_data("petroleum/crd/wellend", "series", creds::eia_key)
get_facet_data("petroleum/crd/wellend", "series", creds::eia_key) -> temp
View(temp)
temp %>% str()
temp == list()
is.list(temp)
is.list(temp) & length(temp) == 0
load_all()
route_tree("petroleum/crd/wellend", creds::eia_key)
load_all()
route_tree("petroleum/crd/wellend", creds::eia_key)
eia_meta("petroleum/crd/", creds::eia_key) %>% get_routes()
route_tree("petroleum/crd/pres", creds::eia_key)
eia_meta("petroleum/crd/pres", creds::eia_key) -> working
eia_meta("petroleum/crd/wellend", creds::eia_key) -> broken
View(broken)
View(working)
load_all()
eia_meta("petroleum/crd/wellend", creds::eia_key) -> broken
route_tree("petroleum/crd/wellend", creds::eia_key) -> broken2
load_all()
route_tree("petroleum/crd/wellend", creds::eia_key) -> broken2
load_all()
route_tree("petroleum/crd/wellend", creds::eia_key) -> broken2
load_all()
route_tree("petroleum/crd/wellend", creds::eia_key) -> broken2
load_all()
route_tree("petroleum/crd/wellend", creds::eia_key) -> broken2
eia_meta("petroleum/crd/wellend", creds::eia_key) -> broken2
View(broken2)
load_all()
route_tree("petroleum/crd/wellend", creds::eia_key) -> broken2
load_all()
document()
check()
document()
check()
load_all()
route_tree("petroleum", creds::eia_key) -> PET
View(PET)
