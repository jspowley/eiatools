library(devtools)
create_package("eiatools")
setwd("~/FIN 450/eiatools")
library(devtools)
use_mit_license()
usethis::use_data_raw()
use_pipe()
usethis::use_package("dplyr")
document()
check()
document()
check()
document()
check()
root
??root
?root
# usethis::use_pipe()
# usethis::use_package("dplyr")
root <- "https://api.eia.gov/v2/"
# usethis::use_pipe()
# usethis::use_package("dplyr")
root <- "https://api.eia.gov/v2/"
usethis::use_data(root, overwrite = TRUE)
document()
check()
use_r(data)
use_r("data")
document()
root
eiatools::root
?root
use_package("httr")
use_package("jsonlite")
use_package("stringr")
use_package("lubridate")
library(tidyverse)
load_all()
library(devtools)
use_r("eia_call")
use_r("eia_meta")
use_r("eia_data")
use_r("internal_data")
usethis::use_data(root, overwrite = TRUE)
load_all()
eia_meta("petroleum", "UKCNbCB0m8aixfPBshQU3Jdlz2uZsEbG2HebvhHX")
load_all()
eia_meta("petroleum", "UKCNbCB0m8aixfPBshQU3Jdlz2uZsEbG2HebvhHX")
#' EIA Metadata Request
#'
#' @param sub A string containing subdirectory, or tree of subdir filepaths for the eia API endpoint
#' @param api_key String with your eia api key
#'
#' @return A list containing the json data
#' @export
#'
#' @examples
eia_meta <- function(sub, api_key){
httr::GET(paste0(root,sub,"?api_key=", api_key)) %>%
httr::content(as = "text")
}
rm(eia_meta)
load_all()
eia_meta("petroleum", "UKCNbCB0m8aixfPBshQU3Jdlz2uZsEbG2HebvhHX")
load_all()
eia_meta("petroleum", "UKCNbCB0m8aixfPBshQU3Jdlz2uZsEbG2HebvhHX")
use_r("eia_version")
library(devtools)
load_all()
key <- "UKCNbCB0m8aixfPBshQU3Jdlz2uZsEbG2HebvhHX"
eia_version(key)
eia_meta("", key)
eia_meta("", key) %>% View()
#' EIA Metadata Request
#'
#' @param sub A string containing subdirectory, or tree of subdir filepaths for the eia API endpoint
#' @param api_key String with your eia api key
#'
#' @return A list containing the json data
#' @export
#'
#' @examples
eia_meta <- function(sub, api_key){
httr::GET(paste0(root,sub,"?api_key=", api_key)) %>%
httr::content(as = "text") %>%
jsonlite::fromJSON() %>%
.$response
}
rm(eia_meta)
load_all()
eia_meta("", key)
eia_meta("", key) %>% View()
use_r("detect_routes")
use_r("get_routes")
use_r("eia_call")
load_all()
append
?append
load_all()
rm(key)
eia_version(key)
load_all()
use_news_md()
#' EIA Mapping Request
#'
#' @param type String with URL extension for product type
#' @param offset Used to offset pagination in sets of 5000
#' @param api_key String with your eia API key
#'
#' @return A DataFrame containing the unique identifiers for all products
#' @export
#'
#' @examples
eia_map <- function(type,offset,api_key){
response <-
paste0("https://api.eia.gov/v2/",type,"?api_key=", api_key,url,offset,'&length=5000') %>%
eia_call()
data <- response$data %>%
dplyr::select(-period, -value) %>%
dplyr::distinct(series, .keep_all = TRUE)
return(data)
}
key <- UKCNbCB0m8aixfPBshQU3Jdlz2uZsEbG2HebvhHX
key <- "UKCNbCB0m8aixfPBshQU3Jdlz2uZsEbG2HebvhHX"
products <- c('petroleum/pri/spt/data', 'natural-gas/pri/sum/data/') ## These Are The Only Two That Have Price Data Related (So They Maintain Consistent Columns)
all_series <- list() ## Discuss What We Care About Mapping For This Project
url <- '&frequency=monthly&data[0]=value&sort[0][column]=period&sort[0][direction]=desc&offset='
for (product in products){
df <- eia_map(type = product, offset = 0,api_key = key )
all_series <- append(all_series, list(df))
}
all_series_df <- dplyr::bind_rows(all_series)
all_series_df ## Missing Multiple // Will Work On This Week, Wanted A General Idea
