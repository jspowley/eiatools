library(devtools)
create_package("eiatools")
setwd("~/FIN 450/eiatools")
library(devtools)
use_mit_license()
usethis::use_data_raw()
use_pipe()
usethis::use_package("dplyr")
document()
check()
document()
check()
document()
check()
root
??root
?root
# usethis::use_pipe()
# usethis::use_package("dplyr")
root <- "https://api.eia.gov/v2/"
# usethis::use_pipe()
# usethis::use_package("dplyr")
root <- "https://api.eia.gov/v2/"
usethis::use_data(root, overwrite = TRUE)
document()
check()
use_r(data)
use_r("data")
document()
root
eiatools::root
?root
use_package("httr")
use_package("jsonlite")
use_package("stringr")
use_package("lubridate")
library(tidyverse)
load_all()
library(devtools)
use_r("eia_call")
use_r("eia_meta")
use_r("eia_data")
use_r("internal_data")
usethis::use_data(root, overwrite = TRUE)
load_all()
eia_meta("petroleum", "UKCNbCB0m8aixfPBshQU3Jdlz2uZsEbG2HebvhHX")
load_all()
eia_meta("petroleum", "UKCNbCB0m8aixfPBshQU3Jdlz2uZsEbG2HebvhHX")
#' EIA Metadata Request
#'
#' @param sub A string containing subdirectory, or tree of subdir filepaths for the eia API endpoint
#' @param api_key String with your eia api key
#'
#' @return A list containing the json data
#' @export
#'
#' @examples
eia_meta <- function(sub, api_key){
httr::GET(paste0(root,sub,"?api_key=", api_key)) %>%
httr::content(as = "text")
}
rm(eia_meta)
load_all()
eia_meta("petroleum", "UKCNbCB0m8aixfPBshQU3Jdlz2uZsEbG2HebvhHX")
load_all()
eia_meta("petroleum", "UKCNbCB0m8aixfPBshQU3Jdlz2uZsEbG2HebvhHX")
use_r("eia_version")
library(devtools)
load_all()
key <- "UKCNbCB0m8aixfPBshQU3Jdlz2uZsEbG2HebvhHX"
eia_version(key)
eia_meta("", key)
eia_meta("", key) %>% View()
#' EIA Metadata Request
#'
#' @param sub A string containing subdirectory, or tree of subdir filepaths for the eia API endpoint
#' @param api_key String with your eia api key
#'
#' @return A list containing the json data
#' @export
#'
#' @examples
eia_meta <- function(sub, api_key){
httr::GET(paste0(root,sub,"?api_key=", api_key)) %>%
httr::content(as = "text") %>%
jsonlite::fromJSON() %>%
.$response
}
rm(eia_meta)
load_all()
eia_meta("", key)
eia_meta("", key) %>% View()
use_r("detect_routes")
use_r("get_routes")
use_r("eia_call")
load_all()
append
?append
load_all()
rm(key)
eia_version(key)
load_all()
use_news_md()
#' EIA Mapping Request
#'
#' @param type String with URL extension for product type
#' @param offset Used to offset pagination in sets of 5000
#' @param api_key String with your eia API key
#'
#' @return A DataFrame containing the unique identifiers for all products
#' @export
#'
#' @examples
eia_map <- function(type,offset,api_key){
response <-
paste0("https://api.eia.gov/v2/",type,"?api_key=", api_key,url,offset,'&length=5000') %>%
eia_call()
data <- response$data %>%
dplyr::select(-period, -value) %>%
dplyr::distinct(series, .keep_all = TRUE)
return(data)
}
key <- UKCNbCB0m8aixfPBshQU3Jdlz2uZsEbG2HebvhHX
key <- "UKCNbCB0m8aixfPBshQU3Jdlz2uZsEbG2HebvhHX"
products <- c('petroleum/pri/spt/data', 'natural-gas/pri/sum/data/') ## These Are The Only Two That Have Price Data Related (So They Maintain Consistent Columns)
all_series <- list() ## Discuss What We Care About Mapping For This Project
url <- '&frequency=monthly&data[0]=value&sort[0][column]=period&sort[0][direction]=desc&offset='
for (product in products){
df <- eia_map(type = product, offset = 0,api_key = key )
all_series <- append(all_series, list(df))
}
all_series_df <- dplyr::bind_rows(all_series)
all_series_df ## Missing Multiple // Will Work On This Week, Wanted A General Idea
library(devtools)
library(creds)
api_key <- creds::eia_key
rm(api_key)
library(devtools)
usethis::use_ccby_nc_license()
use_proprietary_license("Justin Powley, Brayden Boyko")
document()
git add .
use_proprietary_license("Justin Powley, Brayden Boyko")
library(testthat)
use_testthat()
use_test("eia_data_mapping")
?test_that
test_that("eia_map_works", {
products <- c('petroleum/pri/spt/data', 'natural-gas/pri/sum/data') ## These Are The Only Two That Have Price Data Related (So They Maintain Consistent Columns)
all_series <- list() ## Discuss What We Care About Mapping For This Project
for (product in products){
df <- eia_map(sub = product, offset = 0, freq = "monthly", api_key = key )
all_series <- append(all_series, list(df))
}
all_series_df <- dplyr::bind_rows(all_series)
all_series_df ## Missing Multiple // Will Work On This Week, Wanted A General Idea
})
test_that("eia_map_works", {
expect_no_error({
products <- c('petroleum/pri/spt/data', 'natural-gas/pri/sum/data') ## These Are The Only Two That Have Price Data Related (So They Maintain Consistent Columns)
all_series <- list() ## Discuss What We Care About Mapping For This Project
for (product in products){
df <- eia_map(sub = product, offset = 0, freq = "monthly", api_key = key )
all_series <- append(all_series, list(df))
}
all_series_df <- dplyr::bind_rows(all_series)
all_series_df ## Missing Multiple // Will Work On This Week, Wanted A General Idea
})
load_all()
test_that("eia_map_works", {
expect_no_error({
products <- c('petroleum/pri/spt/data', 'natural-gas/pri/sum/data') ## These Are The Only Two That Have Price Data Related (So They Maintain Consistent Columns)
all_series <- list() ## Discuss What We Care About Mapping For This Project
for (product in products){
df <- eia_map(sub = product, offset = 0, freq = "monthly", api_key = key )
all_series <- append(all_series, list(df))
}
all_series_df <- dplyr::bind_rows(all_series)
all_series_df ## Missing Multiple // Will Work On This Week, Wanted A General Idea
})
test()
load_all()
test()
use_r("map_headers")
#' Remap Headers
#'
#' @param api_key A string
#' @param headers A named list with keys matching facet type.
#'
#' @return
#'
#' @examples
map_headers <- function(url, api_key, headers = NULL){
if(is.null(headers)){
return(paste0(url, "?api_key=", api_key))
}
rm(map_headers)
document()
check()
load_all()
load("~/FIN 450/eiatools/data/root.rda")
rm(root)
my_data <- "We have no need for user accessible data yet! Data is defined via testthat or for function internal use!"
usethis::use_data(my_data, overwrite = T)
document()
load_all()
map_headers("http://mysite.org", "1234", list(series = "parmesian", country = "italy"))
load_all()
map_headers("http://mysite.org", "1234", list(series = "parmesian", country = "italy"))
httr::add_headers(type = "parmesian", country = "italy")
"mysite.org" %>% httr::add_headers(type = "parmesian", country = "italy")
httr::add_headers(type = "parmesian", country = "italy")
httr::modify_url("mysite.org", params = httr::add_headers(country = "italy"))
httr::add_headers(list(country = "italy"))
httr::add_headers(list(country = "italy") %>% flatten())
list(country = "italy", province = "alberta") %>% do.call(httr::add_headers, .)
load_all()
map_headers("https://mysite.org", "1234", list(country = "italy", type = "parmesian"))
load_all()
map_headers("https://mysite.org", "1234", list(country = "italy", type = "parmesian"))
load_all()
map_headers("https://mysite.org", "1234", list(country = "italy", type = "parmesian"))
map_headers("https://mysite.org", "1234", list(country = "italy", type = "parmesian")) %>% httr::modify_url("mysite.org", query = .)
map_headers("https://mysite.org", "1234", list(country = "italy", type = "parmesian")) %>% httr::modify_url("mysite.org", params = .)
map_headers("https://mysite.org", "1234", list(country = "italy", type = "parmesian")) %>% httr::modify_url("mysite.org", query = .)
list(country = "italy", type = "parmesian")
list(country = "italy", type = "parmesian") %>% do.call(httr::add_headers, .)
list(country = "italy", type = "parmesian") %>% do.call(httr::add_headers, .) %>% httr::modify_url(url = "base_url", .)
list(country = "italy", type = "parmesian") %>% do.call(httr::add_headers, .) %>% httr::modify_url(url = "base_url", query = .)
c(country = "italy", type = "parmesian") %>% do.call(httr::add_headers, .) %>% httr::modify_url(url = "base_url", query = .)
c(country = "italy", type = "parmesian") %>% httr::add_headers() %>% httr::modify_url(url = "base_url", query = .)
c(country = "italy", type = "parmesian") %>% httr::add_headers()
is.list(c(1,2))
is.list(list(1,2))
is.list(c(list(1,2)))
list(1,2)
list(1,2) %>% str()
list(1,2) %>% c() %>% str()
list(1,2) %>% unlist() %>% str()
list(apple = 1, iphone = 2) %>% unlist() %>% str()
c(apple = 1, iphone = 2)
list(apple = 1, iphone = 2) %>% unlist() %>% c() %>% str()
print(unlist(list(apple = 1, iphone = 2)))
unlist(list(apple = 1, iphone = 2)) %>% str()
str(c(apple = 1, iphone = 2))
load_all()
map_headers("mysite.org", "1234", list(a = 1, b = 2))
httr::request("mysite.org")
httr::modify_url("url", query = list(param1 = "value1", param2 = "value2"))
httr::modify_url("url", query = c(param1 = "value1", param2 = "value2"))
load_all()
map_headers("myite.org", "1234", list(food = "cheese", temp = "4_degrees"))
load_all()
map_headers("myite.org", "1234", list(food = "cheese", temp = "4_degrees"))
map_headers("https://mysite.org", "1234", list(food = "cheese", temp = "4_degrees"))
use_test("eia_version")
eia_version(creds::eia_key)
test()
use_r("add_facets")
# Conversion for known facets and headers:
conversion_table <- list(
sort = "sort[0][column]",
direction = "sort[0][direction]",
data = "data[0]"
)
conversion_table["sort"]
conversion_table["sort"][1]
conversion_table["sort"][[1]
conversion_table["sort"][[1]]
load_all()
map_headers("https://mysite.org", "1234", list(sort = "period", direction = "desc", data = "value"))
load_all()
map_headers("https://mysite.org", "1234", list(sort = "period", direction = "desc", data = "value"))
load_all()
map_headers("https://mysite.org", "1234", list(sort = "period", direction = "desc", data = "value"))
map_headers("https://mysite.org", "1234", list(sort = "period", direction = "desc", data = "value")) %>% paste0(collapse = &)
map_headers("https://mysite.org", "1234", list(sort = "period", direction = "desc", data = "value")) %>% paste0(collapse = "&")
map_headers("https://mysite.org", "1234", list(sort = "period", direction = "desc", data = "value"))
load_all()
map_headers("https://mysite.org", "1234", list(sort = "period", direction = "desc", data = "value")) -> temp
paste(names(temp), unlist(temp)))
paste(names(temp), unlist(temp))
paste(names(temp), unlist(temp), sep = "=", collapse = "&")
load_all()
map_headers("https://mysite.org", "1234", list(sort = "period", direction = "desc", data = "value"))
load_all()
map_headers("https://mysite.org", "1234", list(sort = "period", direction = "desc", data = "value"))
load_all()
key <- creds::eia_key
expect_no_error({
products <- c('petroleum/pri/spt/data', 'natural-gas/pri/sum/data') ## These Are The Only Two That Have Price Data Related (So They Maintain Consistent Columns)
all_series <- list() ## Discuss What We Care About Mapping For This Project
for (product in products){
df <- eia_map(sub = product, offset = 0, freq = "monthly", api_key = key )
all_series <- append(all_series, list(df))
}
all_series_df <- dplyr::bind_rows(all_series)
all_series_df ## Missing Multiple // Will Work On This Week, Wanted A General Idea
})
#expect_no_error({
products <- c('petroleum/pri/spt/data', 'natural-gas/pri/sum/data') ## These Are The Only Two That Have Price Data Related (So They Maintain Consistent Columns)
all_series <- list() ## Discuss What We Care About Mapping For This Project
for (product in products){
df <- eia_map(sub = product, offset = 0, freq = "monthly", api_key = key )
all_series <- append(all_series, list(df))
}
key <- creds::eia_key
#expect_no_error({
products <- c('petroleum/pri/spt/data', 'natural-gas/pri/sum/data') ## These Are The Only Two That Have Price Data Related (So They Maintain Consistent Columns)
all_series <- list() ## Discuss What We Care About Mapping For This Project
for (product in products){
df <- eia_map(sub = product, offset = 0, freq = "monthly", api_key = key)
all_series <- append(all_series, list(df))
}
load_all()
key <- creds::eia_key
#expect_no_error({
products <- c('petroleum/pri/spt/data', 'natural-gas/pri/sum/data') ## These Are The Only Two That Have Price Data Related (So They Maintain Consistent Columns)
all_series <- list() ## Discuss What We Care About Mapping For This Project
for (product in products){
df <- eia_map(sub = product, offset = 0, freq = "monthly", api_key = key)
all_series <- append(all_series, list(df))
}
load_all()
key <- creds::eia_key
#expect_no_error({
products <- c('petroleum/pri/spt/data', 'natural-gas/pri/sum/data') ## These Are The Only Two That Have Price Data Related (So They Maintain Consistent Columns)
all_series <- list() ## Discuss What We Care About Mapping For This Project
for (product in products){
df <- eia_map(sub = product, offset = 0, freq = "monthly", api_key = key)
all_series <- append(all_series, list(df))
}
all_series_df <- dplyr::bind_rows(all_series)
"https://api.eia.gov/v2/petroleum/pri/spt/data?sort[0][column]=period&sort[0][direction]=desc&data[0]=value&length=5000&offset=0&frequency=monthly&api_key=UKCNbCB0m8aixfPBshQU3Jdlz2uZsEbG2HebvhHX" %>% eia_call()
load_all()
key <- creds::eia_key
#expect_no_error({
products <- c('petroleum/pri/spt/data', 'natural-gas/pri/sum/data') ## These Are The Only Two That Have Price Data Related (So They Maintain Consistent Columns)
all_series <- list() ## Discuss What We Care About Mapping For This Project
for (product in products){
df <- eia_map(sub = product, offset = 0, freq = "monthly", api_key = key)
all_series <- append(all_series, list(df))
}
load_all()
key <- creds::eia_key
#expect_no_error({
products <- c('petroleum/pri/spt/data', 'natural-gas/pri/sum/data') ## These Are The Only Two That Have Price Data Related (So They Maintain Consistent Columns)
all_series <- list() ## Discuss What We Care About Mapping For This Project
for (product in products){
df <- eia_map(sub = product, offset = 0, freq = "monthly", api_key = key)
all_series <- append(all_series, list(df))
}
load_all()
key <- creds::eia_key
#expect_no_error({
products <- c('petroleum/pri/spt/data', 'natural-gas/pri/sum/data') ## These Are The Only Two That Have Price Data Related (So They Maintain Consistent Columns)
all_series <- list() ## Discuss What We Care About Mapping For This Project
for (product in products){
df <- eia_map(sub = product, offset = 0, freq = "monthly", api_key = key)
all_series <- append(all_series, list(df))
}
load_all()
key <- creds::eia_key
#expect_no_error({
products <- c('petroleum/pri/spt/data', 'natural-gas/pri/sum/data') ## These Are The Only Two That Have Price Data Related (So They Maintain Consistent Columns)
all_series <- list() ## Discuss What We Care About Mapping For This Project
for (product in products){
df <- eia_map(sub = product, offset = 0, freq = "monthly", api_key = key)
all_series <- append(all_series, list(df))
}
all_series_df <- dplyr::bind_rows(all_series)
load_all()
key <- creds::eia_key
#expect_no_error({
products <- c('petroleum/pri/spt/data', 'natural-gas/pri/sum/data') ## These Are The Only Two That Have Price Data Related (So They Maintain Consistent Columns)
all_series <- list() ## Discuss What We Care About Mapping For This Project
for (product in products){
df <- eia_map(sub = product, offset = 0, freq = "monthly", api_key = key)
all_series <- append(all_series, list(df))
}
all_series_df <- dplyr::bind_rows(all_series)
all_series_df ## Missing Multiple // Will Work On This Week, Wanted A General Idea
document()
check()
test()
use_package("creds")
document()
check()
document()
check()
document()
check()
test()
?uniqe()
?unique()
document()
check()
load_all()
check()
test()
available::available("creds")
available::available("myCreds")
